# change directories and print information (ss == git status)
cl() { cd "$1" && ls; }
cs() { cd "$1" && ss; }

cm() { git checkout main && gf && rb && gfp}

com() { git commit -m "$1"; }

# commit dotfiles
dotc() {
  currdir=`pwd`
  dot && aa && com "$1" && ph
  cd "$currdir"
}

fin() { find . -name "$1"; }

# This is only used for terminal prompt purposes
git_branch() { 
  git branch 2> /dev/null | sed -n -e 's/^\* \(.*\)/(\1)/p'
}

ga() { git add "$1" }

gbd() { git branch -D "$1" }

gfr() { gf && rb }

gr() {
  if [ "$#" -eq 0 ]; then
    git restore .
  else
    git restore $@
  fi
}

grs() {
  if [ "$#" -eq 0 ]; then
    git restore --staged .
  else
    git restore --staged $@
  fi
}

# recursive grep, case insensitive. Prefer ripgrep (rg) when possible, should be faster
rgrep() {
  grep -IR --exclude-dir={target,.git,.idea} $1 $2
}

# symlink an absolutate path
sln() {
  currdir=`pwd`
  ln -fhsv "$currdir/$1" $2
}

# symlink a path to bin
sbin() {
  sln $1 $BIN_PATH
}

sw() {
  swd $1 $2;
}

swd() {
  git switch $1 || git switch -c $1 $2;
}

# edit sh files and call git status to remind me to commit
vb() {
  currdir=`pwd`
  cd ~/.jacobw_sh

  vim .
  ss

  cd "$currdir"
}

# edit vim files and call git status to remind me to commit
vv() {
  currdir=`pwd`
  cd ~/.jacobw_vim

  vim .
  ss

  cd "$currdir"
}
