# change directories and print information (ss == git status)
cl() { cd "$1" && ls; }
cs() { cd "$1" && ss; }

cm() { git checkout main && gf && rb && gfp}

com() { git commit -m "$1"; }

# this function sets up my work display to be centered above my computer
dw() {
  # get the displayplacer command that sets the current display configuration.
  # This makes an assumption about the displayplacer list command output format.
  dp_curr=$(dl | tail -n 1)

  # where the monitor should be located. You can get this by manually setting the display 
  # where you'd like, running displayplacer list to get the coords, and setting this value.
  # You shouldn't need to change it again. These coords are roughly top middle.
  monitor_location="(-614,-1440)"
  
  # Check if the input contains exactly two ids
  if [[ $(echo "$dp_curr" | grep -o 'id:[^ ]*' | wc -l) -ne 2 ]]; then
    echo "Error: The current displays do not contain exactly two ids. Displays: $dp_curr"
    return 1
  fi

  # Replace the origin of the second display id with desired location.
  # This assumes the external monitor is always second.
  dp_new=$(echo "$dp_curr" | sed -E "s/origin:\([0-9-]+,[0-9-]+\)/origin:$monitor_location/2")

  # Print the modified command
  echo "Executing modified command: $dp_new"

  # Execute the modified command
  eval $dp_new
}

# commit dotfiles
dotc() {
  currdir=`pwd`
  dot && aa && com "$1" && ph
  cd "$currdir"
}

fin() { find . -name "$1"; }

# This is only used for terminal prompt purposes
git_branch() { 
  git branch 2> /dev/null | sed -n -e 's/^\* \(.*\)/(\1)/p'
}

ga() { git add "$1" }

gbd() { git branch -D "$1" }

gbd() {
  # Extract branches that have no upstream anymore
  branches=$(gb | grep ": gone")

  # Check if there are any branches to delete
  if [[ -z "$branches" ]]; then
    echo "No branches found to delete."
    return
  fi

  # grab just the branch name and convert to array
  branch_names=$(echo "$branches" | awk '{print $1}')
  branch_names_arr=("${(f)branch_names}") # this is a zsh command

  # Prompt user once for all branches
  echo "The following branches were found:"
  echo "$branches"
  echo -n "Do you want to delete all of these branches? (y/n): "
  read response

  if [[ "$response" == "y" ]]; then
    for branch in "${branch_names_arr[@]}"; do
      git branch -D "$branch"
    done

    echo "Completed deleting branches"
    return
  fi

  # Prompt user for each branch
  for branch in "${branch_names_arr[@]}"; do
    echo -n "Do you want to delete the branch '$branch'? (y/n): "
    read single_response
    if [[ "$single_response" == "y" ]]; then
      git branch -D "$branch"
    else
      echo "Skipping branch '$branch'."
    fi
  done

  echo "Completed deleting branches"
}

gfr() { gf && rb }

gr() {
  if [ "$#" -eq 0 ]; then
    git restore .
  else
    git restore $@
  fi
}

grs() {
  if [ "$#" -eq 0 ]; then
    git restore --staged .
  else
    git restore --staged $@
  fi
}

# recursive grep, case insensitive. Prefer ripgrep (rg) when possible, should be faster
rgrep() {
  grep -IR --exclude-dir={target,.git,.idea} $1 $2
}

# symlink an absolutate path
sln() {
  currdir=`pwd`
  ln -fhsv "$currdir/$1" $2
}

# symlink a path to bin
sbin() {
  sln $1 $BIN_PATH
}

sw() {
  swd $1 $2;
}

swd() {
  git switch $1 || git switch -c $1 $2;
}

# edit sh files and call git status to remind me to commit
vb() {
  currdir=`pwd`
  cd ~/.jacobw_sh

  vim .
  ss

  cd "$currdir"
}

# edit vim files and call git status to remind me to commit
vv() {
  currdir=`pwd`
  cd ~/.jacobw_vim

  vim .
  ss

  cd "$currdir"
}
